# -*- coding: utf-8 -*-
"""
After you train a bunch of models it is sometimes useful to re-evaluate them (e.g. on a different test set)

This script pulls /Summary_Tables/Trained_Model_Summary.csv (generated by Summarize_Trained_PyCox_Models.py after you have some trained + evaluated models)

In this example, we just build new job files for each model that evaluate (but don't train) the models


"""

import collections
collections.Callable = collections.abc.Callable

import os, csv
import numpy as np
import json
import io


#%% utility function
def String_List_Add(String_List, String_To_Add):
    return String_List + [String_To_Add]


csv_path = os.path.join(os.getcwd(), 'Summary_Tables','Trained_Model_Summary.csv')
my_data = np.genfromtxt(csv_path, delimiter=',', dtype=None)


# Adjust here to decide what you want to keep in args
for i,k in enumerate(my_data[0]):
    print(i,k)
    
headers = [str(k)[2:-1] for k in my_data[0,0:36]] # limit inputs to a column subset



# %% Set global params (train time)
time_h = 11 # hour # BCH - 6, Code15 - 15. Double for 'Any' GPU
time_m = 59 # min

GPU = 'Any' # Quadro_RTX or Titan_RTX or Tesla_K or Tesla_T or NVIDIA_A40 or or NVIDIA_A100 'Any' (Any is good for Eval) 
# mem = 256 # GB, int. now set based on test set


# any args you DONT want to copy over from the arg list
skip_or_overwrite_args = ['Train','early_stop', 'Load', 'Model_Folder_Path', 'Eval_Dataloader', 'epoch_end', 'Best_Epoch', 'Min_Early_Stop_To_Not_Miss', 'num_durations', 'Training Time'] #(['Model_Folder_Path'] is generated

# any args you want to add to the arg list for everyone
additional_args   = ['early_stop', 'Eval_Dataloader', 'Load', 'epoch_end','Train', 'num_durations']
additional_values = [-1,           'Test'           , 'Best',   '-1'     ,'True',  '100']

# %% build job files per model
for row in my_data[1:]: # skip the header

    temp = str(row[0])[2:-1]
    Model_Name = temp.split('_')[0]
    Model_Name_Mod = '_'.join(temp.split('_')[1:])
    job_name = 'Run_'+str(Model_Name) + '_' +  Model_Name_Mod
    
    # set memory based on the dataset
    test_dataset = str(row[1])[2:-1]
    if (test_dataset == 'Code15'):
        mem = 99
    else:
        mem = 333

    String_List = []
    String_List = String_List_Add(String_List, '#!/bin/bash')
    
    #GPU
    if (GPU == 'Titan_RTX'):
        String_List = String_List_Add(String_List, '#SBATCH --partition=bch-gpu-pe')
        String_List = String_List_Add(String_List, '#SBATCH --gres=gpu:Titan_RTX:1')
    elif (GPU == 'Quadro_RTX'):
        String_List = String_List_Add(String_List, '#SBATCH --partition=bch-gpu-pe')
        String_List = String_List_Add(String_List, '#SBATCH --gres=gpu:Quadro_RTX:1')
    elif (GPU == 'NVIDIA_A40'):
        String_List = String_List_Add(String_List, '#SBATCH --partition=bch-gpu-pe')
        String_List = String_List_Add(String_List, '#SBATCH --gres=gpu:NVIDIA_A40:1')
    elif (GPU == 'NVIDIA_A100'):
        String_List = String_List_Add(String_List, '#SBATCH --partition=bch-gpu-pe')
        String_List = String_List_Add(String_List, '#SBATCH --gres=gpu:NVIDIA_A100:1')
    elif (GPU == 'Tesla_K'):
        String_List = String_List_Add(String_List, '#SBATCH --partition=bch-gpu')
        String_List = String_List_Add(String_List, '#SBATCH --gres=gpu:Tesla_K:1')
    elif (GPU == 'Tesla_T'):
        String_List = String_List_Add(String_List, '#SBATCH --partition=bch-gpu')
        String_List = String_List_Add(String_List, '#SBATCH --gres=gpu:Tesla_T:1')
    elif (GPU == 'Any'):
        String_List = String_List_Add(String_List, '#SBATCH --partition=bch-gpu-pe')
        String_List = String_List_Add(String_List, '#SBATCH --gres=gpu:1')
    else:
        String_List = String_List_Add(String_List, '#SBATCH --partition=bch-compute') # the non-GPU
        
    String_List = String_List_Add(String_List, '#SBATCH --time='+str(time_h)+':'+str(time_m)+':00')
    String_List = String_List_Add(String_List, '#SBATCH --job-name='+job_name)
    String_List = String_List_Add(String_List, '#SBATCH --output=./Job_File_Out/Out_'+job_name+'.txt')
    String_List = String_List_Add(String_List, '#SBATCH --ntasks=1')
    String_List = String_List_Add(String_List, '#SBATCH --mem='+str(mem)+'G')
    
    # String_List = String_List_Add(String_List, 'module load singularity')
    String_List = String_List_Add(String_List, 'hostname') #  ... recommended for debugging
    
    # And now we build the call
    if Model_Name in ['RibeiroReg', 'InceptionTimeReg']:
        # Sing_Cmd = 'singularity exec --nv Sing_Torch_05032024.sif python3 \'Model_Runner_PyCox.py\''
        Sing_Cmd = 'singularity exec --bind /lab-share --nv Sing_Torch_05032024.sif python3 \'Model_Runner_PyCox.py\''
        
    if Model_Name in ['RibeiroClass', 'InceptionClass']:
        # Sing_Cmd = 'singularity exec --nv Sing_Torch_05032024.sif python3 \'Model_Runner_SurvClass.py\''
        Sing_Cmd = 'singularity exec --bind /lab-share --nv Sing_Torch_05032024.sif python3 \'Model_Runner_SurvClass.py\''
    
    print(Model_Name)
   
    # Now add the args from the csv
    for i,k in enumerate(row):
        
        if (i >= len(headers)):# skip metrics, chosen manually, above.
            continue
        
        header = headers[i]
        text = str(k)[2:-1]
        
        if (header in skip_or_overwrite_args): # skip args you don't want
            continue
        
        if (text == 'No Entry'): # don't add values you don't have entries for (defaults should autopopulate on eval anyway)
            continue
        
        # Ex of how to switch the test set:
        # if (header == 'Test_Folder'):
        #     if (text == 'Code15'):
        #         text = 'MIMICIV'
        #     else:
        #         tet = 'Code15'
        
        Sing_Cmd = Sing_Cmd + ' ' + '--'+ header +' ' + str(text)
        
    # add extra args specified above
    for a,v in zip(additional_args,additional_values):
        Sing_Cmd = Sing_Cmd + ' ' + '--'+ a +' ' + str(v)
   

    
    # %% save things out
    String_List = String_List_Add(String_List, Sing_Cmd)
    print(String_List)
    
    # https://stackoverflow.com/questions/899103/writing-a-list-to-a-file-with-python-with-newlines
    # https://stackoverflow.com/questions/2536545/how-to-write-unix-end-of-line-characters-in-windows
    

    tmp = os.path.join(os.getcwd(), 'Jobs_Generated')
    if (os.path.isdir(tmp) == False):
        os.mkdir(tmp)
    targ_dir = os.path.join(os.getcwd(), 'Jobs_Generated', 'Jobs_Generated_From_Summary')
    if (os.path.isdir(targ_dir) == False):
        os.mkdir(targ_dir)
        
    file_path = os.path.join(targ_dir, job_name+'.txt')
    
    with io.open(file_path,'w', newline='\n') as f:
        for line in String_List:
            f.write(f"{line}\n")
